<?php

namespace App\Repositories;

use App\Repositories\Contracts\RepositoryInterface;
use Illuminate\Database\Eloquent\Model;

abstract class Repository implements RepositoryInterface
{
    public function __call($method, $arguments)
    {
        return $this->model->{$method}(...$arguments);
    }

    public function getAll()
    {
        return $this->model->all();
    }

    public function getById($id)
    {
        return $this->model->find($id);
    }

    public function create(array $attributes)
    {
        return $this->model->create($attributes);
    }

    public function update($identifier , array $attributes)
    {
        if($identifier instanceof Model){
            $identifier->update($attributes);
            return $identifier;
        }
        $record = $this->model->find($identifier);
        $record->update($attributes);
        return $record;
    }

    public function delete($identifier)
    {
        if($identifier instanceof Model)
        return (bool) $identifier->delete();

        return (bool) $this->model->find($identifier)->delete();
    }
}